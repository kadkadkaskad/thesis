// <auto-generated />
using System;
using FlagHunter.Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlagHunter.Api.Migrations
{
    [DbContext(typeof(FlagHunterDbContext))]
    [Migration("20201128140813_november")]
    partial class november
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FlagHunter.Api.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d394e4a-a9d4-4c30-b7a4-7583a760b402"),
                            CourseId = "ib1111",
                            Name = "Programming I.",
                            TeacherId = new Guid("b9941aa8-a37e-4556-a370-b3d7e9928383")
                        },
                        new
                        {
                            Id = new Guid("0f825d31-1f0b-47d5-85a1-f10c2798b81d"),
                            CourseId = "ib1112",
                            Name = "Programming II.",
                            TeacherId = new Guid("b9941aa8-a37e-4556-a370-b3d7e9928383")
                        },
                        new
                        {
                            Id = new Guid("ac829de8-276b-494f-b4ac-0027ff23c210"),
                            CourseId = "ib1113",
                            Name = "Linux basics",
                            TeacherId = new Guid("9f93e652-b6f6-44d4-995f-d27a41ec67a8")
                        });
                });

            modelBuilder.Entity("FlagHunter.Api.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e0621b5-1715-4981-9c57-3851d7ed88e3"),
                            Email = "alicet@stud.u-szeged.hu",
                            FirstName = "Alice",
                            LastName = "Thompson",
                            UserName = "alice"
                        },
                        new
                        {
                            Id = new Guid("edbf9650-1608-4306-8746-a806b9245609"),
                            Email = "bobr@stud.u-szeged.hu ",
                            FirstName = "Bob",
                            LastName = "Ross",
                            UserName = "bob"
                        },
                        new
                        {
                            Id = new Guid("6a30e5fe-b3be-481a-83f6-f6cf110df128"),
                            Email = "carols@stud.u-szeged.hu",
                            FirstName = "Carol",
                            LastName = "Smith",
                            UserName = "carol"
                        });
                });

            modelBuilder.Entity("FlagHunter.Api.Entities.StudentTest", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Solved")
                        .HasColumnType("bit");

                    b.HasKey("StudentId", "TestId");

                    b.HasIndex("TestId");

                    b.ToTable("StudentTests");

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("1e0621b5-1715-4981-9c57-3851d7ed88e3"),
                            TestId = new Guid("917f3950-f008-4881-bf12-e917e128359c"),
                            Active = true,
                            Id = new Guid("90f76b05-849d-44e7-a021-1b68ec3037c5"),
                            Solved = false
                        },
                        new
                        {
                            StudentId = new Guid("1e0621b5-1715-4981-9c57-3851d7ed88e3"),
                            TestId = new Guid("3b6062df-e6c1-43b7-b71a-fe634eff8bab"),
                            Active = true,
                            Id = new Guid("3055cf85-ee03-434d-8a57-0e5599fd169c"),
                            Solved = false
                        },
                        new
                        {
                            StudentId = new Guid("1e0621b5-1715-4981-9c57-3851d7ed88e3"),
                            TestId = new Guid("1729d331-e558-4e69-bdf3-a18998869764"),
                            Active = true,
                            Id = new Guid("20aa118c-1463-439b-af16-91819b1e3302"),
                            Solved = false
                        },
                        new
                        {
                            StudentId = new Guid("1e0621b5-1715-4981-9c57-3851d7ed88e3"),
                            TestId = new Guid("d3a1a54d-9968-4f36-a830-92d37c3af724"),
                            Active = true,
                            Id = new Guid("f4ff138d-a54e-4439-a24f-456bf967afde"),
                            Solved = false
                        },
                        new
                        {
                            StudentId = new Guid("1e0621b5-1715-4981-9c57-3851d7ed88e3"),
                            TestId = new Guid("d36fd7bc-ab7b-4bf0-af19-83da4f1c68cb"),
                            Active = true,
                            Id = new Guid("3dcf2f80-404e-4306-aa6c-266a2ae1e3f5"),
                            Solved = false
                        },
                        new
                        {
                            StudentId = new Guid("1e0621b5-1715-4981-9c57-3851d7ed88e3"),
                            TestId = new Guid("7dc5d6af-d49e-408b-834a-1d7989d7c301"),
                            Active = true,
                            Id = new Guid("1529e3bd-292c-4791-bc48-d2eaaf819b64"),
                            Solved = false
                        },
                        new
                        {
                            StudentId = new Guid("edbf9650-1608-4306-8746-a806b9245609"),
                            TestId = new Guid("7dc5d6af-d49e-408b-834a-1d7989d7c301"),
                            Active = true,
                            Id = new Guid("63cae9a1-44df-449c-a1cd-2b36fb18a2b6"),
                            Solved = false
                        },
                        new
                        {
                            StudentId = new Guid("6a30e5fe-b3be-481a-83f6-f6cf110df128"),
                            TestId = new Guid("7dc5d6af-d49e-408b-834a-1d7989d7c301"),
                            Active = true,
                            Id = new Guid("35caa14a-053a-4703-a6db-d6cfb50e790e"),
                            Solved = false
                        });
                });

            modelBuilder.Entity("FlagHunter.Api.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9941aa8-a37e-4556-a370-b3d7e9928383"),
                            Email = "davids@inf.u-szeged.hu",
                            FirstName = "David",
                            LastName = "Sanders",
                            UserName = "david"
                        },
                        new
                        {
                            Id = new Guid("9f93e652-b6f6-44d4-995f-d27a41ec67a8"),
                            Email = "evam@inf.u-szeged.hu",
                            FirstName = "Eva",
                            LastName = "Morgan",
                            UserName = "eva"
                        });
                });

            modelBuilder.Entity("FlagHunter.Api.Entities.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("917f3950-f008-4881-bf12-e917e128359c"),
                            CourseId = new Guid("ac829de8-276b-494f-b4ac-0027ff23c210"),
                            Description = "Write a command with pipes that lists all the files with 'txt' ending and concats the result into a new 'string'",
                            Name = "Bash commands basics I."
                        },
                        new
                        {
                            Id = new Guid("7dc5d6af-d49e-408b-834a-1d7989d7c301"),
                            CourseId = new Guid("0f825d31-1f0b-47d5-85a1-f10c2798b81d"),
                            Description = "Create a class with the name of Human. The class must include 3 PRIVATE properties: name (string), age (int) and male (bool). You have to create a constructor where you set all of the properties, but you must ensure that the name is a non-empty string and the age is between the 1 and 60 values. You also have to give the male attribute a default value. Last, you have to create an overload for printing out theHuman's properties. (overloading ostream's << operator)",
                            Name = "C++ classes and encapsulation part I."
                        },
                        new
                        {
                            Id = new Guid("3b6062df-e6c1-43b7-b71a-fe634eff8bab"),
                            CourseId = new Guid("0d394e4a-a9d4-4c30-b7a4-7583a760b402"),
                            Description = "Description 1",
                            Name = "Test 1"
                        },
                        new
                        {
                            Id = new Guid("1729d331-e558-4e69-bdf3-a18998869764"),
                            CourseId = new Guid("0d394e4a-a9d4-4c30-b7a4-7583a760b402"),
                            Description = "Description 2",
                            Name = "Test 2"
                        },
                        new
                        {
                            Id = new Guid("d3a1a54d-9968-4f36-a830-92d37c3af724"),
                            CourseId = new Guid("0d394e4a-a9d4-4c30-b7a4-7583a760b402"),
                            Description = "Description 3",
                            Name = "Test 3"
                        },
                        new
                        {
                            Id = new Guid("d36fd7bc-ab7b-4bf0-af19-83da4f1c68cb"),
                            CourseId = new Guid("0d394e4a-a9d4-4c30-b7a4-7583a760b402"),
                            Description = "Description 4",
                            Name = "Test 4"
                        });
                });

            modelBuilder.Entity("FlagHunter.Api.Entities.Course", b =>
                {
                    b.HasOne("FlagHunter.Api.Entities.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlagHunter.Api.Entities.StudentTest", b =>
                {
                    b.HasOne("FlagHunter.Api.Entities.Student", "Student")
                        .WithMany("StudentTests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlagHunter.Api.Entities.Test", "Test")
                        .WithMany("StudentTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlagHunter.Api.Entities.Test", b =>
                {
                    b.HasOne("FlagHunter.Api.Entities.Course", "Course")
                        .WithMany("Tests")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
